#
# plotter.py
#
"""Plot the solution that was generated by driver.py."""

# SciPy packages
import io
import logging  # , mpld3
from typing import Dict

import numpy as np
from matplotlib.pyplot import figure
from matplotlib import rc
from kernel.engine import align

# Fixes "UserWarning: Starting a Matplotlib GUI outside of the main thread will likely fail".
# https://stackoverflow.com/a/74471578/1147061
import matplotlib

matplotlib.use("agg")
# from arrhenius import plot_arrhenius

# Initialize logger:
# tell the program to send messages on its own behalf.
logger = logging.getLogger(__name__)

# our colour 'array'
# allows for more concise loop code
colour = [
    0,
    "b",
    "g",
    "r",
    "c",
    "m",
    "y",
    "k",
    "1",
    "0.75",
    "0.65",
    "0.55",
    "0.45",
    "0.35",
    "0.25",
    "0.25",
    "0.15",
]
if_SkipDrawingSpeciesWithZeroConcentrations = True


def fake_writer(plot):
    """this function tricks matplotlib into writing figure into memory instead of an actual file on disk."""
    buf = io.BytesIO()
    plot.savefig(buf, format="svg")
    buf.seek(0)
    data = buf.read()
    buf.close()
    return '<svg viewBox="0 0 2520 1584">' + data.decode("utf-8")[367:]


def sub_plots(
    job_id: str,
    plotting_dict: Dict[str, int],
    true_data=None,
    user_data=None,
    new_size: int = 1000,
):
    logger = logging.getLogger(job_id).getChild("sub_plots")
    number_of_plots = len(plotting_dict)
    logger.info("        (a) entered Plotter.sub_plots.")
    # create the figure and determine the 'layout' of the subplots.
    profiles = figure(
        figsize=(35, 22), dpi=80, facecolor="w", edgecolor="k", tight_layout=True
    )
    combined = figure(
        figsize=(35, 22), dpi=80, facecolor="w", edgecolor="k", tight_layout=True
    )
    # Arrange the subplots in a square grid. Figure out how many rows and columns we need.
    dimensions = int(np.ceil(np.sqrt(number_of_plots)))
    logger.info(
        f"        (b) Attempting to arrange {number_of_plots} plots over a {dimensions}x{dimensions} square grid:"
    )
    rc("font", size=22)
    sub_combined = combined.add_subplot(
        1, 1, 1, title="Combined True Profile", xlabel="time", ylabel="Concentration"
    )
    data_x_user = None
    user_data_sampled = None
    if user_data is not None and true_data is not None:
        true_data = align.make_same_length(job_id, true_data, user_data)
        user_data_sampled = user_data[:, :: max(1, user_data.shape[1] // new_size)]
        data_x_user = user_data_sampled[0, :]
    if true_data is not None:
        true_data_sampled = true_data[:, :: max(1, true_data.shape[1] // new_size)]
        data_x_true = true_data_sampled[0, :]
    else:
        true_data_sampled = None
        data_x_true = None
    logger.info(
        f"            Lossy-compressing true_data by selecting only {new_size} items, "
        f"which means a span of every {true_data.shape[1] / new_size if true_data is not None else 'N/A'} items.\n"
        f"            The true_data is compressed from {true_data.shape if true_data is not None else 'N/A'} to {true_data_sampled.shape if true_data_sampled is not None else 'N/A'}."
    )
    logger.info("            Drawing curves for:")
    for subplot_id, (name, location) in enumerate(plotting_dict.items(), start=1):
        logger.info(f"              {name}")
        sub_individual = profiles.add_subplot(
            dimensions,
            dimensions,
            subplot_id,
            title="Concentration Profile of " + name,
            xlabel="time",
            ylabel="[" + name + "]",
        )
        if true_data_sampled is not None and data_x_true is not None:
            data_y_this = true_data_sampled[location + 1, :]
            if not (
                if_SkipDrawingSpeciesWithZeroConcentrations
                and not any(y != 0 for y in data_y_this)
            ):
                logger.info(
                    f"                True model for {name} at location {location + 1}."
                )
                sub_individual.plot(
                    data_x_true,
                    data_y_this,
                    colour[1],
                    label="True " + "[" + name + "]",
                    linestyle="-",
                )
                sub_combined.plot(
                    data_x_true,
                    data_y_this,
                    colour[subplot_id + 2],
                    label="True " + "[" + name + "]",
                    linestyle="-",
                )
        if user_data_sampled is not None and data_x_user is not None:
            data_y_this = user_data_sampled[location + 1, :]
            if not (
                if_SkipDrawingSpeciesWithZeroConcentrations
                and not any(y != 0 for y in data_y_this)
            ):
                logger.info(
                    f"                User model for {name} at location {location + 1}."
                )
                sub_individual.plot(
                    data_x_user,
                    data_y_this,
                    colour[2],
                    label="User " + "[" + name + "]",
                    linestyle="--",
                )
                sub_combined.plot(
                    data_x_user,
                    data_y_this,
                    colour[subplot_id + 2],
                    label="User " + "[" + name + "]",
                    linestyle="--",
                )
    sub_combined.legend()
    logger.info("        (c) Saving SVG: [Individual]")
    profiles = fake_writer(profiles)
    logger.info("                        [Combined]")
    combined = fake_writer(combined)
    logger.info("                        Done.")
    return profiles, combined


if __name__ == "__main__":
    logger.info("Successfully loaded Plotter.py.")
